<snippet>
    <content><![CDATA[
import itertools

# Infinite Iterators
itertools.count(10) # -> [10, 11, 12, 13, ...]

itertools.cycle('ABCD') # -> [A, B, C, D, A, ...]

itertools.repeat(10) # -> [10, 10, 10, 10, ...]

# Terminating Iterators
itertools.accumulate([1, 2, 3, 4, 5]) # -> [1, 3, 6, 10, 15]

itertools.chain('ABC', 'DEF') # -> [A, B, C, D, E, F]

itertools.compress('ABCDEF', [1,0,1,0,1,1]) # -> [A, C, E, F]

itertools.pairwise('ABCDEFG') # -> [AB, BC, CD, DE, EF, FG]

# Combinatoric Iterators
itertools.product([1,2,3], "ABC") # -> [(1,A), (1,B), (1,C), (2,A), (2,B), (2,C), (3,A), (3,B), (3,C)]

itertools.permutations("ABC", 2) # -> [AB, AC, BA, BC, CA, CB]

itertools.combinations("ABC", 2) # -> [AB, AC, BC]

itertools.combinations_with_replacement('ABC', 2) # -> [AA, AB, AC, BB, BC, CC]

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>itertoolsHelp|combinatorics</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.python</scope>
</snippet>
