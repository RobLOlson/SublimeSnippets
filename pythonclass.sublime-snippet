<snippet>
    <content><![CDATA[# --- $1 Class ------------------------------------------------------
#
# Notes:
#
class ${1:ClassName}(${2:object}):
    ${3/.+/"""/}${3:docstring for $1}${3/.+/"""\n/}${3/.+/\t/}
#--- Special Methods <$1> -------------------------------------------
    def __init__(self${4/([^,])?(.*)/(?1:, )/}${4:arg}):
        ${5:super($1, self).__init__()}
${4/(\A\s*,\s*\Z)|,?\s*([A-Za-z_][a-zA-Z0-9_]*)\s*(=[^,]*)?(,\s*|$)/(?2:\t\tself.$2 = $2\n)/g}      $0
#^^^ Special Methods <$1> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
#--- Private Methods <$1> -------------------------------------------
#
#--- self._example(...) <$1 private method> -------------------------

    def _example(self):
        pass

#^^^ self._example(...) <$1 private method> ^^^^^^^^^^^^^^^^^^^^^^^^^
#
#^^^ Public Methods <$1> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#--- Public Methods <$1> --------------------------------------------
#
#--- self.example(...) <$1 private method> --------------------------

    def example(self):
        pass

#^^^ self._example(...) <$1 private method> ^^^^^^^^^^^^^^^^^^^^^^^^^
#
# ^^^^^ class $1() ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^]]></content>
    <tabTrigger>class</tabTrigger>
    <scope>source.python - meta.function.parameters - meta.function-call - meta.statement - meta.mapping - meta.sequence - meta.set - comment - string</scope>
    <description>New Class</description>
</snippet>
