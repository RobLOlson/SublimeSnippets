<snippet>
    <content><![CDATA[
# debug < info < warning < error = exception < critical

# logging.basicConfig(filename='app.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')
# logging.warning('This will get logged to a file')

# format options available at https://docs.python.org/3/library/logging.html#logrecord-attributes

# **Logging Stack Traces**
# a = 5
# b = 0
# 
# try:
#   c = a / b
# except Exception as e:
#   logging.error("Exception occurred", exc_info=True)

# **Custom Logger and Handler**
# =============================
#
# import logging
# 
# # Create a custom logger named f"{__name__}" (current module name)
# logger = logging.getLogger(f"{__name__}.py")
# 
# # Create handlers
# c_handler = logging.StreamHandler()
# f_handler = logging.FileHandler('file.log')
# c_handler.setLevel(logging.WARNING)
# f_handler.setLevel(logging.ERROR)
# 
# # Create formatters and add it to handlers
# c_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
# f_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# c_handler.setFormatter(c_format)
# f_handler.setFormatter(f_format)
# 
# # Add handlers to the logger
# logger.addHandler(c_handler)
# logger.addHandler(f_handler)
# 
# logger.warning('This is a warning')
# logger.error('This is an error')


# **Configuring the logger from YAML**
# ====================================
# import logging
# import logging.config
# import yaml
#
# with open('config.yaml', 'r') as f:
#     config = yaml.safe_load(f.read())
#     logging.config.dictConfig(config)
#
# logger = logging.getLogger(__name__)
#
# logger.debug('This is a debug message')

# **config.yaml**
# ===============
# version: 1
# formatters:
#   simple:
#     format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
# handlers:
#   console:
#     class: logging.StreamHandler
#     level: DEBUG
#     formatter: simple
#     stream: ext://sys.stdout
# loggers:
#   sampleLogger:
#     level: DEBUG
#     handlers: [console]
#     propagate: no
# root:
#   level: DEBUG
#   handlers: [console]

]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>pythonLoggingHelp</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.python</scope>
</snippet>
